// _layout.tsximport { Stack } from 'expo-router';export default function Layout() {  return (    <Stack      screenOptions={{        headerStyle: {          backgroundColor: '#1a1a1a', // Dark header color        },        headerTintColor: '#fff',        headerTitleStyle: {          fontWeight: 'bold',        },      }}    />  );}//index.tsximport React from 'react';import { View, Text, Pressable, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';import { Link } from 'expo-router';import { MaterialIcons } from '@expo/vector-icons';import useDeviceScanning from './hooks/useDeviceScanning';export default function Home() {  const { availableDevices, isScanning, error, scanNetwork } = useDeviceScanning();  return (    <View style={styles.container}>      <Text style={styles.title}>MobiMouse Connect</Text>            <Text style={styles.descriptionText}>        Other devices running MobiMouse server in your same network will appear here.      </Text>      <Pressable         style={styles.scanButton}        onPress={scanNetwork}        disabled={isScanning}      >        <Text style={styles.scanButtonText}>          {isScanning ? 'Scanning...' : 'Scan for Devices'}        </Text>      </Pressable>      {error && (        <Text style={styles.errorText}>{error}</Text>      )}      <Text style={styles.sectionTitle}>Available devices</Text>      <ScrollView style={styles.deviceList}>        {isScanning ? (          <ActivityIndicator size="large" color="#4CAF50" />        ) : availableDevices.length > 0 ? (          availableDevices.map((device) => (            <Link               key={device.id}              href={{                pathname: "/touchpad",                params: { serverIp: device.ip }              }}              asChild            >              <Pressable style={styles.deviceItem}>                <MaterialIcons name="computer" size={24} color="#fff" style={styles.deviceIcon} />                <View>                  <Text style={styles.deviceName}>{device.name}</Text>                  <Text style={styles.deviceIp}>{device.ip}</Text>                </View>              </Pressable>            </Link>          ))        ) : (          <Text style={styles.noDevicesText}>No devices found</Text>        )}      </ScrollView>    </View>  );}const styles = StyleSheet.create({  container: {    flex: 1,    backgroundColor: '#1a1a1a',    padding: 20,  },  title: {    fontSize: 34,    fontWeight: 'bold',    color: '#ffffff',    marginBottom: 20,  },  descriptionText: {    fontSize: 16,    color: '#cccccc',    marginBottom: 40,    lineHeight: 24,  },  sectionTitle: {    fontSize: 24,    fontWeight: 'bold',    color: '#ffffff',    marginBottom: 15,  },  deviceList: {    flex: 1,  },  deviceItem: {    flexDirection: 'row',    alignItems: 'center',    padding: 16,    backgroundColor: '#2a2a2a',    borderRadius: 8,    marginBottom: 10,  },  deviceIcon: {    marginRight: 15,  },  deviceName: {    fontSize: 18,    color: '#ffffff',  },  scanButton: {    backgroundColor: '#4CAF50',    padding: 12,    borderRadius: 8,    marginBottom: 20,  },  scanButtonText: {    color: '#fff',    fontSize: 16,    fontWeight: 'bold',    textAlign: 'center',  },  errorText: {    color: '#ff4444',    fontSize: 14,    marginBottom: 20,  },  deviceIp: {    fontSize: 14,    color: '#999999',  },  noDevicesText: {    color: '#999999',    fontSize: 16,    textAlign: 'center',    marginTop: 20,  }});//touchpad.tsximport { useRouter, useLocalSearchParams } from 'expo-router';  // Instead of using navigation propimport React, { useState, useEffect, useRef } from 'react';import { View, PanResponder, Button, StyleSheet } from 'react-native';import axios from 'axios';const App = () => {    const router = useRouter(); // Use the router hook    //const [serverIp, setServerIp] = useState('192.168.1.107'); // Replace with your computer's IP    const { serverIp } = useLocalSearchParams<{ serverIp: string }>();    const [screenSize, setScreenSize] = useState({ width: 0, height: 0 });    const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 }); // Tracks current mouse position    useEffect(() => {        const fetchInitialData = async () => {            try {                const screenResponse = await axios.get(`http://${serverIp}:3000/screen`);                setScreenSize(screenResponse.data);                const mouseResponse = await axios.get(`http://${serverIp}:3000/mouse/position`);                setMousePosition(mouseResponse.data);            } catch (error) {                console.error('Error fetching initial data:', error);            }        };        fetchInitialData();    }, [serverIp]);    const [isHolding, setIsHolding] = useState(false);    const lastTapTime = useRef(0);    const TAP_INTERVAL = 300; // ms between taps to count as double-tap        const [isDragging, setIsDragging] = useState(false);    const lastMouseCheck = useRef(Date.now());    const IDLE_CHECK_INTERVAL = 2000; // Check mouse position after 2s idleuseEffect(() => {    const checkMousePosition = async () => {        if (Date.now() - lastMouseCheck.current > IDLE_CHECK_INTERVAL) {            try {                const mouseResponse = await axios.get(`http://${serverIp}:3000/mouse/position`);                setMousePosition(mouseResponse.data);                lastMouseCheck.current = Date.now();            } catch (error) {                console.error('Error fetching mouse position:', error);            }        }    };    const interval = setInterval(checkMousePosition, IDLE_CHECK_INTERVAL);    return () => clearInterval(interval);}, [serverIp]);// Add this state for tracking touchesconst [touchCount, setTouchCount] = useState(0);const [lastClickTime, setLastClickTime] = useState(0);const CLICK_DELAY = 200; // Delay to check for potential double tapconst [isLeftClickHeld, setIsLeftClickHeld] = useState(false);const MOVEMENT_THRESHOLD = 1; // Increased threshold for movement detectionconst panResponder = PanResponder.create({    onStartShouldSetPanResponder: () => true,    onMoveShouldSetPanResponder: () => true,        onPanResponderGrant: (evt) => {        const touches = evt.nativeEvent.touches.length;        setTouchCount(touches);                const currentTime = Date.now();        pressStartTime.current = currentTime;        hasMoved.current = false;                if (touches === 2) {            setIsLeftClickHeld(true);            axios.post(`http://${serverIp}:3000/mouse/hold`, { button: 'left', action: 'down' });        } else if (touches === 1) {            if (currentTime - lastTapTime.current < TAP_INTERVAL) {                setLastClickTime(0);                axios.post(`http://${serverIp}:3000/mouse/hold`, { button: 'left', action: 'down' });                setIsDragging(true);            }            lastTapTime.current = currentTime;        }    },        onPanResponderMove: (event, gesture) => {        const touches = event.nativeEvent.touches.length;                // Increase threshold for movement detection        if (Math.abs(gesture.dx) > MOVEMENT_THRESHOLD || Math.abs(gesture.dy) > MOVEMENT_THRESHOLD) {            hasMoved.current = true;        }                const newX = Math.min(Math.max(0, mousePosition.x + (gesture.dx / 300) * screenSize.width), screenSize.width);        const newY = Math.min(Math.max(0, mousePosition.y + (gesture.dy / 300) * screenSize.height), screenSize.height);        setMousePosition({ x: newX, y: newY });        axios.post(`http://${serverIp}:3000/mouse/move`, { x: newX, y: newY });    },        onPanResponderRelease: () => {        const pressDuration = Date.now() - pressStartTime.current;        const currentTime = Date.now();                if (isLeftClickHeld) {            setIsLeftClickHeld(false);            axios.post(`http://${serverIp}:3000/mouse/hold`, { button: 'left', action: 'up' });        }                // Only trigger clicks if there was minimal movement        if (touchCount === 1) {            if (isDragging) {                axios.post(`http://${serverIp}:3000/mouse/hold`, { button: 'left', action: 'up' });                setIsDragging(false);            } else if (!hasMoved.current) {  // This check is now more strict due to higher threshold                if (pressDuration < 500) {                    setLastClickTime(currentTime);                    setTimeout(() => {                        if (Date.now() - lastClickTime >= TAP_INTERVAL) {                            handleClick('left');                        }                    }, CLICK_DELAY);                } else {                    handleClick('right');                }            }        }                setTouchCount(0);    },});    const pressStartTime = useRef(0);    const hasMoved = useRef(false);    const handleClick = (buttonType: 'left' | 'right') => {        axios.post(`http://${serverIp}:3000/mouse/click`, { button: buttonType });    };    return (        <View style={styles.container}>            <View style={styles.touchpad} {...panResponder.panHandlers} />            <View style={styles.buttonContainer}>                <Button title="Left Click" onPress={() => handleClick('left')} />                <Button title="Right Click" onPress={() => handleClick('right')} />            </View>        </View>    );};const styles = StyleSheet.create({    container: { flex: 1, justifyContent: 'center', alignItems: 'center' },    touchpad: {        width: 400,        height: 700,        backgroundColor: '#ddd',        borderRadius: 10,        marginBottom: 20,    },    buttonContainer: {        flexDirection: 'row',        gap: 10,    }});export default App;// useDeviceScanning.tsimport { useState, useEffect, useRef } from 'react';import NetInfo from '@react-native-community/netinfo';import dgram from 'react-native-udp';import axios from 'axios';interface Device {  id: string;  name: string;  ip: string;  port: number;}const useDeviceScanning = () => {  const [availableDevices, setAvailableDevices] = useState<Device[]>([]);  const [isScanning, setIsScanning] = useState(false);  const [error, setError] = useState<string | null>(null);  const devicesMap = useRef<Map<string, Device>>(new Map());  const discoverySocket = useRef<any>(null);  const createDiscoverySocket = () => {    // Corrected socket creation with proper options    const socket = dgram.createSocket({      type: 'udp4',      reusePort: true,      debug: true    });        socket.on('error', (err) => {      console.error('Discovery socket error:', err);      setError('Network error during discovery');    });    socket.on('message', (msg, rinfo) => {      try {        const device = JSON.parse(msg.toString());        const deviceId = `${device.ip}:${device.port}`;        if (!devicesMap.current.has(deviceId)) {          // Verify server is running before adding          axios.get(`http://${device.ip}:${device.port}/ping`, { timeout: 1000 })            .then(() => {              devicesMap.current.set(deviceId, {                id: deviceId,                name: device.name,                ip: device.ip,                port: device.port              });              setAvailableDevices(Array.from(devicesMap.current.values()));            })            .catch(err => {              console.log(`Server verification failed for ${device.ip}:`, err);            });        }      } catch (e) {        console.error('Error parsing device response:', e);      }    });    return socket;  };  const scanNetwork = async () => {    setIsScanning(true);    setError(null);    devicesMap.current.clear();    setAvailableDevices([]);    try {      const netInfo = await NetInfo.fetch();      if (netInfo.type !== 'wifi') {        throw new Error('Please connect to a WiFi network');      }      // Create new discovery socket if needed      if (!discoverySocket.current) {        discoverySocket.current = createDiscoverySocket();        // Bind to a random port        discoverySocket.current.bind({          port: 0,          address: '0.0.0.0'        });      }      // Also try the known IP if configured      const knownIP = '192.168.1.107';      try {        const response = await axios.get(`http://${knownIP}:3000/ping`);        if (response.data === 'Server is running') {          devicesMap.current.set(`${knownIP}:3000`, {            id: `${knownIP}:3000`,            name: 'Known Device',            ip: knownIP,            port: 3000          });          setAvailableDevices(Array.from(devicesMap.current.values()));        }      } catch (e) {        console.log('Known IP not available');      }      // Send discovery broadcast      const discoveryMessage = Buffer.from('MOBIMOUSE_DISCOVER');      discoverySocket.current.send(        discoveryMessage,        0,        discoveryMessage.length,        3002,        '255.255.255.255',        (err: Error | null) => {          if (err) {            console.error('Error sending discovery message:', err);          }        }      );    } catch (err) {      setError(err instanceof Error ? err.message : 'Failed to scan for devices');    } finally {      // Stop scanning after 5 seconds      setTimeout(() => {        setIsScanning(false);      }, 5000);    }  };  useEffect(() => {    scanNetwork();    return () => {      if (discoverySocket.current) {        discoverySocket.current.close();        discoverySocket.current = null;      }    };  }, []);  return {    availableDevices,    isScanning,    error,    scanNetwork  };};export default useDeviceScanning;//server.jsconst express = require('express');const robot = require('robotjs');const cors = require('cors');const WebSocket = require('ws');const os = require('os');const dgram = require('dgram');const app = express();const port = 3000;const wsPort = 3001;const discoveryPort = 3002;// Enhanced IP detectionfunction getLocalIPs() {    const interfaces = os.networkInterfaces();    const addresses = [];        for (const name of Object.keys(interfaces)) {        for (const interface of interfaces[name]) {            if (interface.family === 'IPv4' && !interface.internal) {                addresses.push(interface.address);            }        }    }    return addresses;}const ip = getLocalIPs();console.log('Server IPs:', localIPs);const discoverySocket = dgram.createSocket('udp4');discoverySocket.on('error', (err) => {    console.error('Discovery socket error:', err);});discoverySocket.on('message', (msg, rinfo) => {    if (msg.toString() === 'MOBIMOUSE_DISCOVER') {        console.log('Discovery request from:', rinfo.address);        const response = JSON.stringify({            name: os.hostname(),            ip: localIPs[0],            port: port,            wsPort: wsPort        });        discoverySocket.send(response, rinfo.port, rinfo.address);    }});discoverySocket.bind(discoveryPort, () => {    discoverySocket.setBroadcast(true);    console.log(`Discovery service listening on port ${discoveryPort}`);});console.log('\nSelected server IP:', ip);console.log('Server hostname:', os.hostname());// Create WebSocket server with error handlingconst wss = new WebSocket.Server({ port: wsPort });wss.on('connection', (ws) => {    console.log('Client connected');        const serverInfo = JSON.stringify({        name: os.hostname(),        ip: localIPs[0],        port: port    });    ws.send(serverInfo);    ws.on('close', () => {        console.log('Client disconnected');    });});wss.on('error', (error) => {    console.error('WebSocket server error:', error);});// Handle WebSocket connections with detailed loggingwss.on('connection', (ws, req) => {    console.log(`New client connected from ${req.socket.remoteAddress}`);        // Send server info immediately upon connection    const serverInfo = JSON.stringify({        name: os.hostname(),        ip: ip,        port: port    });        console.log('Sending server info:', serverInfo);    ws.send(serverInfo);        ws.on('message', (message) => {        console.log('Received message:', message.toString());    });        ws.on('error', (error) => {        console.error('WebSocket client error:', error);    });        ws.on('close', () => {        console.log('Client disconnected');    });});// Enhanced CORS configurationapp.use(cors());app.use(express.json());app.get('/ping', (req, res) => {    res.send('Server is running');});app.use(express.json());// Add request logging middlewareapp.use((req, res, next) => {    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);    next();});// Test endpoint to verify server is runningapp.get('/ping', (req, res) => {    res.send('Server is running');});// Original endpoints with added loggingapp.post('/mouse/move', (req, res) => {    const { x, y } = req.body;    console.log(`Moving mouse to x: ${x}, y: ${y}`);    try {        robot.moveMouse(x, y);        res.send('Mouse moved!');    } catch (error) {        console.error('Error moving mouse:', error);        res.status(500).send('Failed to move mouse');    }});app.post('/mouse/click', (req, res) => {    const { button = 'left' } = req.body;    console.log(`Mouse click: ${button}`);    try {        robot.mouseClick(button);        res.send(`Mouse ${button} click executed!`);    } catch (error) {        console.error('Error clicking mouse:', error);        res.status(500).send('Failed to click mouse');    }});app.get('/screen', (req, res) => {    try {        const screenSize = robot.getScreenSize();        console.log('Screen size:', screenSize);        res.json(screenSize);    } catch (error) {        console.error('Error getting screen size:', error);        res.status(500).send('Failed to get screen size');    }});app.get('/mouse/position', (req, res) => {    try {        const mousePos = robot.getMousePos();        console.log('Mouse position:', mousePos);        res.json(mousePos);    } catch (error) {        console.error('Error getting mouse position:', error);        res.status(500).send('Failed to get mouse position');    }});app.post('/mouse/hold', (req, res) => {    const { button, action } = req.body;    console.log(`Mouse ${button} ${action}`);    try {        robot.mouseToggle(action, button);        res.send(`Mouse ${button} ${action}`);    } catch (error) {        console.error('Error toggling mouse:', error);        res.status(500).send('Failed to toggle mouse');    }});app.listen(port, () => {    console.log(`Server running at http://localhost:${port}`);    console.log('Available on:');    localIPs.forEach(ip => {        console.log(`  http://${ip}:${port}`);    });});const server = app.listen(port, () => {    console.log(`\nHTTP server running at http://localhost:${port}`);    console.log(`Try accessing: http://${ip}:${port}/ping`);});server.on('error', (error) => {    console.error('HTTP server error:', error);});JSON files//package.json{  "name": "mobimouse",  "main": "expo-router/entry",  "version": "1.0.0",  "scripts": {    "start": "expo start",    "reset-project": "node ./scripts/reset-project.js",    "android": "expo start --android",    "ios": "expo start --ios",    "web": "expo start --web",    "test": "jest --watchAll",    "lint": "expo lint"  },  "jest": {    "preset": "jest-expo"  },  "dependencies": {    "@expo/vector-icons": "^14.0.4",    "@react-native-community/netinfo": "^11.4.1",    "@react-navigation/bottom-tabs": "^7.2.0",    "@react-navigation/native": "^7.0.14",    "@react-navigation/native-stack": "^7.2.0",    "axios": "^1.7.9",    "cors": "^2.8.5",    "expo": "~52.0.23",    "expo-blur": "~14.0.1",    "expo-constants": "~17.0.3",    "expo-font": "~13.0.2",    "expo-haptics": "~14.0.0",    "expo-linking": "~7.0.3",    "expo-network": "^7.0.5",    "expo-router": "~4.0.15",    "expo-splash-screen": "~0.29.18",    "expo-status-bar": "~2.0.0",    "expo-symbols": "~0.2.0",    "expo-system-ui": "~4.0.6",    "expo-web-browser": "~14.0.1",    "express": "^4.21.2",    "react": "18.3.1",    "react-dom": "18.3.1",    "react-native": "0.76.5",    "react-native-ble-manager": "^12.1.2",    "react-native-gesture-handler": "~2.20.2",    "react-native-reanimated": "~3.16.1",    "react-native-safe-area-context": "4.12.0",    "react-native-screens": "~4.4.0",    "react-native-udp": "^4.1.7",    "react-native-web": "~0.19.13",    "react-native-webview": "13.12.5",    "robotjs": "^0.6.0",    "ws": "^8.18.0"  },  "devDependencies": {    "@babel/core": "^7.25.2",    "@types/jest": "^29.5.12",    "@types/react": "~18.3.12",    "@types/react-test-renderer": "^18.3.0",    "jest": "^29.2.1",    "jest-expo": "~52.0.2",    "react-test-renderer": "18.3.1",    "typescript": "^5.3.3"  },  "private": true}//app.json{  "expo": {    "name": "mobimouse",    "slug": "mobimouse",    "version": "1.0.0",    "orientation": "portrait",    "icon": "./assets/images/icon.png",    "scheme": "myapp",    "userInterfaceStyle": "automatic",    "newArchEnabled": true,    "ios": {      "supportsTablet": true    },    "android": {      "adaptiveIcon": {        "foregroundImage": "./assets/images/adaptive-icon.png",        "backgroundColor": "#ffffff"      }    },    "web": {      "bundler": "metro",      "output": "static",      "favicon": "./assets/images/favicon.png"    },    "plugins": [      "expo-router",      [        "expo-splash-screen",        {          "image": "./assets/images/splash-icon.png",          "imageWidth": 200,          "resizeMode": "contain",          "backgroundColor": "#ffffff"        }      ]    ],    "experiments": {      "typedRoutes": true    }  }}